# ********RoostGPT********
"""
Test generated by RoostGPT for test RaghuTestAllie1 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=__post_init___31f603bd31
ROOST_METHOD_SIG_HASH=__post_init___4c025a599a


Scenario 1: Test conversion of `created_at` field from string to datetime
Details:
  TestName: test_created_at_conversion
  Description: This test is intended to verify that when the `created_at` field is a string, it gets converted to a datetime object.
Execution:
  Arrange: Initialize an object with `created_at` as a string.
  Act: Call the __post_init__ method.
  Assert: Check that the `created_at` field is now a datetime object.
Validation:
  This test ensures that the business logic encapsulated in the __post_init__ method correctly converts the `created_at` field from a string to a datetime object.

Scenario 2: Test conversion of `token_expires_at` field from string to datetime
Details:
  TestName: test_token_expires_at_conversion
  Description: This test is intended to verify that when the `token_expires_at` field is a string, it gets converted to a datetime object.
Execution:
  Arrange: Initialize an object with `token_expires_at` as a string.
  Act: Call the __post_init__ method.
  Assert: Check that the `token_expires_at` field is now a datetime object.
Validation:
  This test ensures that the business logic encapsulated in the __post_init__ method correctly converts the `token_expires_at` field from a string to a datetime object.

Scenario 3: Test conversion of `last_used_at` field from string to datetime
Details:
  TestName: test_last_used_at_conversion
  Description: This test is intended to verify that when the `last_used_at` field is a string, it gets converted to a datetime object.
Execution:
  Arrange: Initialize an object with `last_used_at` as a string.
  Act: Call the __post_init__ method.
  Assert: Check that the `last_used_at` field is now a datetime object.
Validation:
  This test ensures that the business logic encapsulated in the __post_init__ method correctly converts the `last_used_at` field from a string to a datetime object.

Scenario 4: Test when all fields are already datetime objects
Details:
  TestName: test_no_conversion_needed
  Description: This test is intended to verify that when all the fields are already datetime objects, they are not converted again.
Execution:
  Arrange: Initialize an object with `created_at`, `token_expires_at`, and `last_used_at` as datetime objects.
  Act: Call the __post_init__ method.
  Assert: Check that the fields remain as datetime objects.
Validation:
  This test ensures that the __post_init__ method does not perform unnecessary conversions when the fields are already in the correct format.
"""

# ********RoostGPT********
import pytest
from datetime import datetime
from authentication_model import RefreshToken

class Test_RefreshTokenPostInit:
    @pytest.mark.positive
    def test_created_at_conversion(self):
        # Arrange
        token = RefreshToken(created_at="2022-01-01 00:00:00", token_expires_at=datetime.now(), last_used_at=datetime.now())
        # Act
        token.__post_init__()
        # Assert
        assert isinstance(token.created_at, datetime)

    @pytest.mark.positive
    def test_token_expires_at_conversion(self):
        # Arrange
        token = RefreshToken(created_at=datetime.now(), token_expires_at="2022-01-01 00:00:00", last_used_at=datetime.now())
        # Act
        token.__post_init__()
        # Assert
        assert isinstance(token.token_expires_at, datetime)

    @pytest.mark.positive
    def test_last_used_at_conversion(self):
        # Arrange
        token = RefreshToken(created_at=datetime.now(), token_expires_at=datetime.now(), last_used_at="2022-01-01 00:00:00")
        # Act
        token.__post_init__()
        # Assert
        assert isinstance(token.last_used_at, datetime)

    @pytest.mark.negative
    def test_no_conversion_needed(self):
        # Arrange
        create_date = datetime.now()
        expire_date = datetime.now()
        last_used_date = datetime.now()
        token = RefreshToken(created_at=create_date, token_expires_at=expire_date, last_used_at=last_used_date)
        # Act
        token.__post_init__()
        # Assert
        assert token.created_at == create_date
        assert token.token_expires_at == expire_date
        assert token.last_used_at == last_used_date
