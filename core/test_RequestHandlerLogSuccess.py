# ********RoostGPT********
"""
Test generated by RoostGPT for test RaghuTestAllie1 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=_log_success_a5785ec911
ROOST_METHOD_SIG_HASH=_log_success_1cf3b5bba7


Scenario 1: Validating successful logging of API Success Message with details
Details:
  TestName: test_log_success_with_valid_details
  Description: This test is intended to verify that the _log_success function logs the correct success message along with the appropriate API details.
Execution:
  Arrange: Initialize a dictionary with API details and a success message string.
  Act: Invoke the _log_success function with the initialized dictionary and string as parameters.
  Assert: Check that the API_LOGGER.debug method was called with the correct parameters.
Validation:
  This test ensures that the function correctly logs the success message with the provided API details. Logging is crucial for debugging and tracking the system's behavior, which is why this functionality needs to be tested.

Scenario 2: Validating successful logging of API Success Message without details
Details:
  TestName: test_log_success_without_details
  Description: This test is intended to verify that the _log_success function logs the correct success message even when no API details are provided.
Execution:
  Arrange: Initialize a success message string.
  Act: Invoke the _log_success function with only the success message string as a parameter.
  Assert: Check that the API_LOGGER.debug method was called with the correct message and an empty dictionary for the 'extra' parameter.
Validation:
  This test ensures that the function can handle cases where no API details are provided and still correctly log the success message. This is important as there may be cases where API details are not available or necessary.

Scenario 3: Validating successful logging of API Success Message with empty message
Details:
  TestName: test_log_success_with_empty_message
  Description: This test is intended to verify that the _log_success function logs an empty success message along with the correct API details.
Execution:
  Arrange: Initialize a dictionary with API details and an empty success message string.
  Act: Invoke the _log_success function with the initialized dictionary and string as parameters.
  Assert: Check that the API_LOGGER.debug method was called with an empty message and the correct API details.
Validation:
  This test ensures that the function can handle cases where an empty success message is provided and still correctly log the API details. This is important as there may be cases where a success message is not necessary or available.
"""

# ********RoostGPT********
import json
import logging
import pytest
import requests
from unittest.mock import patch
from urllib.parse import urlparse
from requests.adapters import HTTPAdapter, Retry

from core.request_handler import RequestHandler

# Mock logging.getLogger to return a mock logger
@patch('logging.getLogger')
class Test_RequestHandlerLogSuccess:
    
    @pytest.mark.regression
    def test_log_success_with_valid_details(self, mock_get_logger):
        # Arrange
        api_details = {"api": "test_api", "status": 200}
        success_message = "API call was successful"
        mock_logger = mock_get_logger.return_value

        # Act
        RequestHandler._log_success(api_details, success_message)

        # Assert
        mock_logger.debug.assert_called_once_with(success_message, extra=api_details)

    @pytest.mark.regression
    def test_log_success_without_details(self, mock_get_logger):
        # Arrange
        success_message = "API call was successful"
        mock_logger = mock_get_logger.return_value

        # Act
        RequestHandler._log_success({}, success_message)

        # Assert
        mock_logger.debug.assert_called_once_with(success_message, extra={})

    @pytest.mark.regression
    def test_log_success_with_empty_message(self, mock_get_logger):
        # Arrange
        api_details = {"api": "test_api", "status": 200}
        success_message = ""
        mock_logger = mock_get_logger.return_value

        # Act
        RequestHandler._log_success(api_details, success_message)

        # Assert
        mock_logger.debug.assert_called_once_with(success_message, extra=api_details)
