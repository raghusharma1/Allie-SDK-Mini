# ********RoostGPT********
"""
Test generated by RoostGPT for test RaghuTestAllie1 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=logging_configs_b4d0d31c3b
ROOST_METHOD_SIG_HASH=logging_configs_37d076d492


```
Scenario 1: Validate the structure of the logging configuration dictionary
Details:
  TestName: test_logging_configs_structure
  Description: This test is intended to verify that the logging configuration dictionary returned by the logging_configs function has the expected structure.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the logging_configs function without any parameters.
  Assert: Check that the returned dictionary has the expected keys and subkeys.
Validation:
  The correct structure of the logging configuration dictionary is crucial for the Python logging module to function correctly. This test ensures that the structure is as expected.

Scenario 2: Validate the formatters in the logging configuration dictionary
Details:
  TestName: test_logging_configs_formatters
  Description: This test is intended to verify that the formatters specified in the logging configuration dictionary are as expected.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the logging_configs function without any parameters.
  Assert: Check that the 'formatters' key in the returned dictionary contains the expected formatters with the expected properties.
Validation:
  The formatters in the logging configuration dictionary determine how log messages are formatted. This test ensures that the correct formatters are used.

Scenario 3: Validate the handlers in the logging configuration dictionary
Details:
  TestName: test_logging_configs_handlers
  Description: This test is intended to verify that the handlers specified in the logging configuration dictionary are as expected.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the logging_configs function without any parameters.
  Assert: Check that the 'handlers' key in the returned dictionary contains the expected handlers with the expected properties.
Validation:
  The handlers in the logging configuration dictionary determine where log messages are sent. This test ensures that the correct handlers are used.

Scenario 4: Validate the root logger in the logging configuration dictionary
Details:
  TestName: test_logging_configs_root_logger
  Description: This test is intended to verify that the root logger specified in the logging configuration dictionary is as expected.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the logging_configs function without any parameters.
  Assert: Check that the 'root' key in the returned dictionary contains the expected properties.
Validation:
  The root logger in the logging configuration dictionary determines the default behavior for logging. This test ensures that the root logger is configured correctly.

Scenario 5: Validate the additional loggers in the logging configuration dictionary
Details:
  TestName: test_logging_configs_additional_loggers
  Description: This test is intended to verify that the additional loggers specified in the logging configuration dictionary are as expected.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the logging_configs function without any parameters.
  Assert: Check that the 'loggers' key in the returned dictionary contains the expected loggers with the expected properties.
Validation:
  Additional loggers in the logging configuration dictionary are used for more specific logging needs. This test ensures that these loggers are configured correctly.
```
"""

# ********RoostGPT********
import pytest
import datetime
import logging
from core.logs import LoggingConfigs.logging_configs

class Test_LoggingConfigsLoggingConfigs:
    # Scenario 1: Validate the structure of the logging configuration dictionary
    def test_logging_configs_structure(self):
        config = logging_configs()
        assert isinstance(config, dict)
        assert 'version' in config
        assert 'formatters' in config
        assert 'handlers' in config
        assert 'root' in config
        assert 'loggers' in config

    # Scenario 2: Validate the formatters in the logging configuration dictionary
    def test_logging_configs_formatters(self):
        config = logging_configs()
        formatters = config['formatters']
        assert 'standard' in formatters
        assert 'console' in formatters
        assert 'json' in formatters

        standard_formatter = formatters['standard']
        assert 'format' in standard_formatter
        assert standard_formatter['format'] == '%(asctime)s[%(name)s][%(levelname)s] %(message)s'

        console_formatter = formatters['console']
        assert 'format' in console_formatter
        assert console_formatter['format'] == '%(message)s'

        json_formatter = formatters['json']
        assert 'class' in json_formatter
        assert json_formatter['class'] == 'pythonjsonlogger.jsonlogger.JsonFormatter'
        assert 'format' in json_formatter
        assert json_formatter['format'] == '%(asctime)s %(name)s %(levelname)s %(message)s'

    # Scenario 3: Validate the handlers in the logging configuration dictionary
    def test_logging_configs_handlers(self):
        config = logging_configs()
        handlers = config['handlers']
        assert 'file' in handlers
        assert 'console' in handlers
        assert 'api_json' in handlers

        file_handler = handlers['file']
        assert 'class' in file_handler
        assert file_handler['class'] == 'logging.FileHandler'
        assert 'formatter' in file_handler
        assert file_handler['formatter'] == 'standard'
        assert 'level' in file_handler
        assert file_handler['level'] == logging.DEBUG
        assert 'filename' in file_handler
        assert file_handler['filename'].startswith('logs/allie-sdk-')

        console_handler = handlers['console']
        assert 'class' in console_handler
        assert console_handler['class'] == 'logging.StreamHandler'
        assert 'formatter' in console_handler
        assert console_handler['formatter'] == 'console'
        assert 'level' in console_handler
        assert console_handler['level'] == logging.INFO
        assert 'stream' in console_handler
        assert console_handler['stream'] == 'ext://sys.stdout'

        api_json_handler = handlers['api_json']
        assert 'class' in api_json_handler
        assert api_json_handler['class'] == 'logging.FileHandler'
        assert 'formatter' in api_json_handler
        assert api_json_handler['formatter'] == 'json'
        assert 'level' in api_json_handler
        assert api_json_handler['level'] == logging.DEBUG
        assert 'filename' in api_json_handler
        assert api_json_handler['filename'].startswith('logs/alation-rest-')

    # Scenario 4: Validate the root logger in the logging configuration dictionary
    def test_logging_configs_root_logger(self):
        config = logging_configs()
        root = config['root']
        assert 'handlers' in root
        assert 'level' in root
        assert root['handlers'] == ['file', 'console']
        assert root['level'] == logging.NOTSET

    # Scenario 5: Validate the additional loggers in the logging configuration dictionary
    def test_logging_configs_additional_loggers(self):
        config = logging_configs()
        loggers = config['loggers']
        assert 'api_json' in loggers

        api_json_logger = loggers['api_json']
        assert 'handlers' in api_json_logger
        assert 'level' in api_json_logger
        assert 'qualname' in api_json_logger
        assert api_json_logger['handlers'] == ['api_json']
        assert api_json_logger['level'] == logging.DEBUG
        assert api_json_logger['qualname'] == 'alation_rest'
