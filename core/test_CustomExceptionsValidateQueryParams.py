# ********RoostGPT********
"""
Test generated by RoostGPT for test RaghuTestAllie1 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=validate_query_params_406dc0a48d
ROOST_METHOD_SIG_HASH=validate_query_params_800921c795


Scenario 1: Validating parameters of correct type
Details:
  TestName: test_validate_query_params_correct_type
  Description: This test is intended to verify that the function validate_query_params doesn't raise an exception when parameters of the correct type are provided.
Execution:
  Arrange: Initialize a parameters object and an expected_type object of the same type.
  Act: Invoke validate_query_params function, passing the parameters object and the expected_type object.
  Assert: Verify that no exception is raised.
Validation:
  This test is important to ensure that the function can correctly identify and accept parameters of the expected type, which is a key requirement for the function to operate correctly.

Scenario 2: Validating parameters of incorrect type
Details:
  TestName: test_validate_query_params_incorrect_type
  Description: This test is intended to verify that the function validate_query_params raises an UnsupportedQueryParams exception when parameters of an incorrect type are provided.
Execution:
  Arrange: Initialize a parameters object and an expected_type object of different types.
  Act: Invoke validate_query_params function, passing the parameters object and the expected_type object.
  Assert: Verify that an UnsupportedQueryParams exception is raised.
Validation:
  This test is important to ensure that the function correctly identifies and rejects parameters of an incorrect type, which is a key requirement for the function to operate correctly.

Scenario 3: Validating parameters when no parameters are provided
Details:
  TestName: test_validate_query_params_no_parameters
  Description: This test is intended to verify that the function validate_query_params doesn't raise an exception when no parameters are provided.
Execution:
  Arrange: Initialize an expected_type object.
  Act: Invoke validate_query_params function, passing None as the parameters object and the expected_type object.
  Assert: Verify that no exception is raised.
Validation:
  This test is important to ensure that the function correctly handles the scenario when no parameters are provided, which is a valid use case in many scenarios.

Scenario 4: Validating parameters when no expected type is provided
Details:
  TestName: test_validate_query_params_no_expected_type
  Description: This test is intended to verify that the function validate_query_params raises an UnsupportedQueryParams exception when no expected type is provided.
Execution:
  Arrange: Initialize a parameters object.
  Act: Invoke validate_query_params function, passing the parameters object and None as the expected_type object.
  Assert: Verify that an UnsupportedQueryParams exception is raised.
Validation:
  This test is important to ensure that the function correctly identifies and rejects the scenario when no expected type is provided, which is a key requirement for the function to operate correctly.
"""

# ********RoostGPT********
import pytest
from core.custom_exceptions import validate_query_params, UnsupportedQueryParams

class Test_CustomExceptionsValidateQueryParams:

    def test_validate_query_params_correct_type(self):
        # Arrange
        parameters = dict()
        expected_type = type(parameters)

        # Act & Assert: No exception should be raised
        try:
            validate_query_params(parameters, expected_type)
        except Exception as e:
            pytest.fail(f"Unexpected Exception raised: {e}")

    def test_validate_query_params_incorrect_type(self):
        # Arrange
        parameters = dict()
        expected_type = str

        # Act & Assert: UnsupportedQueryParams exception should be raised
        with pytest.raises(UnsupportedQueryParams):
            validate_query_params(parameters, expected_type)

    def test_validate_query_params_no_parameters(self):
        # Arrange
        expected_type = dict

        # Act & Assert: No exception should be raised
        try:
            validate_query_params(None, expected_type)
        except Exception as e:
            pytest.fail(f"Unexpected Exception raised: {e}")

    def test_validate_query_params_no_expected_type(self):
        # Arrange
        parameters = dict()

        # Act & Assert: UnsupportedQueryParams exception should be raised
        with pytest.raises(UnsupportedQueryParams):
            validate_query_params(parameters, None)
